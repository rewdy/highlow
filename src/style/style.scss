@use "sass:list";
@use "@picocss/pico/scss/pico" with (
  $theme-color: "pumpkin"
);

:root {
  --pico-font-family: "Alan Sans", Helvetica, Arial, sans-serif;
}

// Footer
body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

footer.site-footer {
  margin-top: auto;
}

// Nav

nav a.active {
  color: var(--pico-contrast);
  font-weight: 600;
}

// Typography

h1 {
  margin: 2rem 0;
  main & {
    text-align: center;
    &:before {
      content: "";
      display: block;
      width: 3rem;
      height: 0.5rem;
      background-color: var(--pico-primary);
      margin: 0 auto 1rem;
    }
  }
}

h2 {
  margin-bottom: 2rem;
}

// Hero

.hero {
  background-color: var(--pico-primary-background);
  color: var(--pico-primary-inverse);
  padding: 3rem 0;
  margin: 2rem 0;
  text-align: center;
  p {
    color: inherit;
  }
}

// Article

article.highlight {
  border-top: 0.75rem solid var(--pico-secondary);
}

// Icons

svg.icon {
  fill: currentColor;
  height: 1rem;
  width: auto;
  vertical-align: baseline;
}

// Custom classes

.attn {
  font-size: 1.15rem;
  line-height: 1.8;
}

.site-footer {
  text-align: center;
  padding: 3rem 0;
}

.text-muted {
  color: var(--pico-muted-color);
}

// Alignment
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-left {
  text-align: left;
}

$spacing-base: 1;
$multipliers: 0 0.25 0.5 1 1.5 3;

@mixin spacing-classes($property, $abbr) {
  @for $i from 0 through 5 {
    .#{$abbr}-#{$i} {
      #{$property}: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}t-#{$i} {
      #{$property}-top: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}r-#{$i} {
      #{$property}-right: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}b-#{$i} {
      #{$property}-bottom: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}l-#{$i} {
      #{$property}-left: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}x-#{$i} {
      #{$property}-left: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
      #{$property}-right: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
    .#{$abbr}y-#{$i} {
      #{$property}-top: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
      #{$property}-bottom: #{$spacing-base * list.nth($multipliers, $i + 1)}rem;
    }
  }
}

@include spacing-classes(margin, m);
@include spacing-classes(padding, p);

// Flexbox utilities

// Display flex
.d-flex {
  display: flex !important;
}
.d-inline-flex {
  display: inline-flex !important;
}

// Flex direction
.flex-row {
  flex-direction: row !important;
}
.flex-row-reverse {
  flex-direction: row-reverse !important;
}
.flex-column {
  flex-direction: column !important;
}
.flex-column-reverse {
  flex-direction: column-reverse !important;
}

// Flex wrap
.flex-wrap {
  flex-wrap: wrap !important;
}
.flex-nowrap {
  flex-wrap: nowrap !important;
}
.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

// Justify content (main axis)
.justify-content-start {
  justify-content: flex-start !important;
}
.justify-content-end {
  justify-content: flex-end !important;
}
.justify-content-center {
  justify-content: center !important;
}
.justify-content-between {
  justify-content: space-between !important;
}
.justify-content-around {
  justify-content: space-around !important;
}
.justify-content-evenly {
  justify-content: space-evenly !important;
}

// Align items (cross axis)
.align-items-start {
  align-items: flex-start !important;
}
.align-items-end {
  align-items: flex-end !important;
}
.align-items-center {
  align-items: center !important;
}
.align-items-baseline {
  align-items: baseline !important;
}
.align-items-stretch {
  align-items: stretch !important;
}

// Align content (for wrapped lines)
.align-content-start {
  align-content: flex-start !important;
}
.align-content-end {
  align-content: flex-end !important;
}
.align-content-center {
  align-content: center !important;
}
.align-content-between {
  align-content: space-between !important;
}
.align-content-around {
  align-content: space-around !important;
}
.align-content-stretch {
  align-content: stretch !important;
}

// Align self (individual flex items)
.align-self-auto {
  align-self: auto !important;
}
.align-self-start {
  align-self: flex-start !important;
}
.align-self-end {
  align-self: flex-end !important;
}
.align-self-center {
  align-self: center !important;
}
.align-self-baseline {
  align-self: baseline !important;
}
.align-self-stretch {
  align-self: stretch !important;
}

// Flex grow and shrink
.flex-fill {
  flex: 1 1 auto !important;
}
.flex-grow-0 {
  flex-grow: 0 !important;
}
.flex-grow-1 {
  flex-grow: 1 !important;
}
.flex-shrink-0 {
  flex-shrink: 0 !important;
}
.flex-shrink-1 {
  flex-shrink: 1 !important;
}

// Gap utilities (modern flexbox)
@mixin gap-classes($property, $prefix) {
  @for $i from 0 through 5 {
    .#{$prefix}-#{$i} {
      #{$property}: #{$spacing-base *
        list.nth($multipliers, $i + 1)}rem !important;
    }
  }
}

@include gap-classes(gap, gap);
@include gap-classes(row-gap, row-gap);
@include gap-classes(column-gap, column-gap);
